# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.

# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'
- task: DownloadSecureFile@1
  name: publickey
  inputs:
    secureFile: 'aksprodsshkey.pub'

- task: TerraformCLI@0
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure'
    backendType: 'azurerm'
    backendServiceArm: 'terraform-svc'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'terraform-storage-rg'
    backendAzureRmResourceGroupLocation: 'UKsouth'
    backendAzureRmStorageAccountName: 'terraformkannaxyz'
    backendAzureRmContainerName: 'testate'
    backendAzureRmKey: 'm.terraform.tfstate'

- task: TerraformCLI@0
  displayName: Terraform Import
  inputs:
    command: 'import'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure'
    environmentServiceName: 'terraform-svc'
    allowTelemetryCollection: true
    resourceAddress: 'azurerm_resource_group.k8s'
    resourceId: '/subscriptions/9beeafa3-8dd6-4cbb-8549-9d0943f83a0e/resourceGroups/k8s-rg-3'
    commandOptions: '-var client_id=${client_id} -var client_secret=${client_secret} -var ssh_public_key=$(publickey.secureFilePath)'


- task: TerraformCLI@0
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure'
    environmentServiceName: 'terraform-svc'
    commandOptions: '-var client_id=${client_id} -var client_secret=${client_secret} -var ssh_public_key=$(publickey.secureFilePath)'
